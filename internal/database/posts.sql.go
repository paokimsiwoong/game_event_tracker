// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, post_url, site_id, registered)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    false
)
RETURNING id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, post_url, site_id, registered
`

type CreatePostParams struct {
	Name     string
	Tag      int32
	TagText  string
	PostedAt pgtype.Timestamptz
	StartsAt pgtype.Timestamptz
	EndsAt   pgtype.Timestamptz
	Body     string
	PostUrl  string
	SiteID   pgtype.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.Name,
		arg.Tag,
		arg.TagText,
		arg.PostedAt,
		arg.StartsAt,
		arg.EndsAt,
		arg.Body,
		arg.PostUrl,
		arg.SiteID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Tag,
		&i.TagText,
		&i.PostedAt,
		&i.StartsAt,
		&i.EndsAt,
		&i.Body,
		&i.PostUrl,
		&i.SiteID,
		&i.Registered,
	)
	return i, err
}

const createPostWithNull = `-- name: CreatePostWithNull :one
INSERT INTO posts (id, created_at, updated_at, name, tag, tag_text, posted_at, body, post_url, site_id, registered)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    false
)
RETURNING id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, post_url, site_id, registered
`

type CreatePostWithNullParams struct {
	Name     string
	Tag      int32
	TagText  string
	PostedAt pgtype.Timestamptz
	Body     string
	PostUrl  string
	SiteID   pgtype.UUID
}

func (q *Queries) CreatePostWithNull(ctx context.Context, arg CreatePostWithNullParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPostWithNull,
		arg.Name,
		arg.Tag,
		arg.TagText,
		arg.PostedAt,
		arg.Body,
		arg.PostUrl,
		arg.SiteID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Tag,
		&i.TagText,
		&i.PostedAt,
		&i.StartsAt,
		&i.EndsAt,
		&i.Body,
		&i.PostUrl,
		&i.SiteID,
		&i.Registered,
	)
	return i, err
}

const deleteOldPosts = `-- name: DeleteOldPosts :exec
DELETE FROM posts
WHERE ends_at < NOW()
`

func (q *Queries) DeleteOldPosts(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteOldPosts)
	return err
}

const deletePostByID = `-- name: DeletePostByID :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePostByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePostByID, id)
	return err
}

const deletePostsBySiteID = `-- name: DeletePostsBySiteID :exec
DELETE FROM posts
WHERE site_id = $1
`

func (q *Queries) DeletePostsBySiteID(ctx context.Context, siteID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePostsBySiteID, siteID)
	return err
}

const deletePostsBySiteName = `-- name: DeletePostsBySiteName :exec
DELETE FROM posts
USING sites
WHERE posts.site_id = sites.id AND sites.name = $1
`

func (q *Queries) DeletePostsBySiteName(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deletePostsBySiteName, name)
	return err
}

const deletePostsBySiteUrl = `-- name: DeletePostsBySiteUrl :exec
DELETE FROM posts
WHERE EXISTS (
    SELECT 1 FROM sites
    WHERE sites.id = posts.site_id AND sites.url = $1
)
`

func (q *Queries) DeletePostsBySiteUrl(ctx context.Context, url string) error {
	_, err := q.db.Exec(ctx, deletePostsBySiteUrl, url)
	return err
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, post_url, site_id, registered FROM posts
WHERE id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id pgtype.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Tag,
		&i.TagText,
		&i.PostedAt,
		&i.StartsAt,
		&i.EndsAt,
		&i.Body,
		&i.PostUrl,
		&i.SiteID,
		&i.Registered,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, post_url, site_id, registered FROM posts
ORDER BY created_at
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.PostUrl,
			&i.SiteID,
			&i.Registered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsAndSites = `-- name: GetPostsAndSites :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.name, posts.tag, posts.tag_text, posts.posted_at, posts.starts_at, posts.ends_at, posts.body, posts.post_url, posts.site_id, posts.registered, sites.name AS site_name, sites.url AS site_url FROM posts
INNER JOIN sites
ON posts.site_id = sites.id
ORDER BY posts.posted_at DESC, posts.starts_at DESC
`

type GetPostsAndSitesRow struct {
	ID         pgtype.UUID
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
	Name       string
	Tag        int32
	TagText    string
	PostedAt   pgtype.Timestamptz
	StartsAt   pgtype.Timestamptz
	EndsAt     pgtype.Timestamptz
	Body       string
	PostUrl    string
	SiteID     pgtype.UUID
	Registered bool
	SiteName   string
	SiteUrl    string
}

func (q *Queries) GetPostsAndSites(ctx context.Context) ([]GetPostsAndSitesRow, error) {
	rows, err := q.db.Query(ctx, getPostsAndSites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsAndSitesRow
	for rows.Next() {
		var i GetPostsAndSitesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.PostUrl,
			&i.SiteID,
			&i.Registered,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByName = `-- name: GetPostsByName :many
SELECT id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, post_url, site_id, registered FROM posts
WHERE name = $1
ORDER BY created_at
`

func (q *Queries) GetPostsByName(ctx context.Context, name string) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.PostUrl,
			&i.SiteID,
			&i.Registered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByNameAndPostedAtAndSiteID = `-- name: GetPostsByNameAndPostedAtAndSiteID :many
SELECT id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, post_url, site_id, registered FROM posts
WHERE name = $1 AND posted_at = $2 AND site_id = $3
ORDER BY created_at
`

type GetPostsByNameAndPostedAtAndSiteIDParams struct {
	Name     string
	PostedAt pgtype.Timestamptz
	SiteID   pgtype.UUID
}

func (q *Queries) GetPostsByNameAndPostedAtAndSiteID(ctx context.Context, arg GetPostsByNameAndPostedAtAndSiteIDParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsByNameAndPostedAtAndSiteID, arg.Name, arg.PostedAt, arg.SiteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.PostUrl,
			&i.SiteID,
			&i.Registered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsBySiteID = `-- name: GetPostsBySiteID :many
SELECT id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, post_url, site_id, registered FROM posts
WHERE site_id = $1
ORDER BY created_at
`

func (q *Queries) GetPostsBySiteID(ctx context.Context, siteID pgtype.UUID) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsBySiteID, siteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.PostUrl,
			&i.SiteID,
			&i.Registered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsOnGoing = `-- name: GetPostsOnGoing :many
SELECT id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, post_url, site_id, registered FROM posts
WHERE starts_at <= NOW() AND (ends_at IS NULL OR ends_at >= NOW())
ORDER BY created_at
`

func (q *Queries) GetPostsOnGoing(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsOnGoing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.PostUrl,
			&i.SiteID,
			&i.Registered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsOnGoingAndSites = `-- name: GetPostsOnGoingAndSites :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.name, posts.tag, posts.tag_text, posts.posted_at, posts.starts_at, posts.ends_at, posts.body, posts.post_url, posts.site_id, posts.registered, sites.name AS site_name, sites.url AS site_url FROM posts
INNER JOIN sites
ON posts.site_id = sites.id
WHERE posts.starts_at <= NOW() AND (posts.ends_at IS NULL OR posts.ends_at >= NOW())
ORDER BY posts.posted_at DESC, posts.starts_at DESC
`

type GetPostsOnGoingAndSitesRow struct {
	ID         pgtype.UUID
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
	Name       string
	Tag        int32
	TagText    string
	PostedAt   pgtype.Timestamptz
	StartsAt   pgtype.Timestamptz
	EndsAt     pgtype.Timestamptz
	Body       string
	PostUrl    string
	SiteID     pgtype.UUID
	Registered bool
	SiteName   string
	SiteUrl    string
}

func (q *Queries) GetPostsOnGoingAndSites(ctx context.Context) ([]GetPostsOnGoingAndSitesRow, error) {
	rows, err := q.db.Query(ctx, getPostsOnGoingAndSites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsOnGoingAndSitesRow
	for rows.Next() {
		var i GetPostsOnGoingAndSitesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.PostUrl,
			&i.SiteID,
			&i.Registered,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsOnGoingAndUpcoming = `-- name: GetPostsOnGoingAndUpcoming :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.name, posts.tag, posts.tag_text, posts.posted_at, posts.starts_at, posts.ends_at, posts.body, posts.post_url, posts.site_id, posts.registered, sites.name AS site_name, sites.url AS site_url FROM posts
INNER JOIN sites
ON posts.site_id = sites.id
WHERE (posts.ends_at IS NULL OR posts.ends_at >= NOW())
ORDER BY posts.posted_at DESC, posts.starts_at DESC
`

type GetPostsOnGoingAndUpcomingRow struct {
	ID         pgtype.UUID
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
	Name       string
	Tag        int32
	TagText    string
	PostedAt   pgtype.Timestamptz
	StartsAt   pgtype.Timestamptz
	EndsAt     pgtype.Timestamptz
	Body       string
	PostUrl    string
	SiteID     pgtype.UUID
	Registered bool
	SiteName   string
	SiteUrl    string
}

func (q *Queries) GetPostsOnGoingAndUpcoming(ctx context.Context) ([]GetPostsOnGoingAndUpcomingRow, error) {
	rows, err := q.db.Query(ctx, getPostsOnGoingAndUpcoming)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsOnGoingAndUpcomingRow
	for rows.Next() {
		var i GetPostsOnGoingAndUpcomingRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.PostUrl,
			&i.SiteID,
			&i.Registered,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsWithinGivenPeriod = `-- name: GetPostsWithinGivenPeriod :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.name, posts.tag, posts.tag_text, posts.posted_at, posts.starts_at, posts.ends_at, posts.body, posts.post_url, posts.site_id, posts.registered, sites.name AS site_name, sites.url AS site_url FROM posts
INNER JOIN sites
ON posts.site_id = sites.id
WHERE posts.ends_at IS NULL OR posts.ends_at >= $1
ORDER BY posts.posted_at DESC, posts.starts_at DESC
`

type GetPostsWithinGivenPeriodRow struct {
	ID         pgtype.UUID
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
	Name       string
	Tag        int32
	TagText    string
	PostedAt   pgtype.Timestamptz
	StartsAt   pgtype.Timestamptz
	EndsAt     pgtype.Timestamptz
	Body       string
	PostUrl    string
	SiteID     pgtype.UUID
	Registered bool
	SiteName   string
	SiteUrl    string
}

func (q *Queries) GetPostsWithinGivenPeriod(ctx context.Context, endsAt pgtype.Timestamptz) ([]GetPostsWithinGivenPeriodRow, error) {
	rows, err := q.db.Query(ctx, getPostsWithinGivenPeriod, endsAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsWithinGivenPeriodRow
	for rows.Next() {
		var i GetPostsWithinGivenPeriodRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.PostUrl,
			&i.SiteID,
			&i.Registered,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetPosts = `-- name: ResetPosts :exec
DELETE FROM posts
`

func (q *Queries) ResetPosts(ctx context.Context) error {
	_, err := q.db.Exec(ctx, resetPosts)
	return err
}

const setPostDates = `-- name: SetPostDates :exec
UPDATE posts
SET updated_at = NOW(), posted_at = $1, starts_at = $2, ends_at = $3
WHERE id = $4
`

type SetPostDatesParams struct {
	PostedAt pgtype.Timestamptz
	StartsAt pgtype.Timestamptz
	EndsAt   pgtype.Timestamptz
	ID       pgtype.UUID
}

func (q *Queries) SetPostDates(ctx context.Context, arg SetPostDatesParams) error {
	_, err := q.db.Exec(ctx, setPostDates,
		arg.PostedAt,
		arg.StartsAt,
		arg.EndsAt,
		arg.ID,
	)
	return err
}

const setPostRegisteredFalse = `-- name: SetPostRegisteredFalse :exec
UPDATE posts
SET updated_at = NOW(), registered = false
WHERE id = $1
`

func (q *Queries) SetPostRegisteredFalse(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, setPostRegisteredFalse, id)
	return err
}

const setPostRegisteredTrue = `-- name: SetPostRegisteredTrue :exec
UPDATE posts
SET updated_at = NOW(), registered = true
WHERE id = $1
`

func (q *Queries) SetPostRegisteredTrue(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, setPostRegisteredTrue, id)
	return err
}
