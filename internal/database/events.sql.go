// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: events.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (id, created_at, updated_at, tag, tag_text, starts_at, ends_at, names, posted_ats, post_urls, post_ids, site_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    $4,
    ARRAY[$5],
    ARRAY[$6],
    ARRAY[$7],
    ARRAY[$8],
    $9
)
ON CONFLICT (tag, starts_at, ends_at)
DO UPDATE SET names = array_append(names, $5), 
posted_ats = array_append(posted_ats, $6),
post_urls = array_append(post_urls, $7),
post_ids = array_append(post_ids, $8),
updated_at = NOW()
RETURNING id, created_at, updated_at, tag, tag_text, starts_at, ends_at, event_cal_id, names, posted_ats, post_urls, post_ids, site_id
`

type CreateEventParams struct {
	Tag      int32
	TagText  string
	StartsAt sql.NullTime
	EndsAt   sql.NullTime
	Column5  interface{}
	Column6  interface{}
	Column7  interface{}
	Column8  interface{}
	SiteID   uuid.UUID
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.Tag,
		arg.TagText,
		arg.StartsAt,
		arg.EndsAt,
		arg.Column5,
		arg.Column6,
		arg.Column7,
		arg.Column8,
		arg.SiteID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tag,
		&i.TagText,
		&i.StartsAt,
		&i.EndsAt,
		&i.EventCalID,
		pq.Array(&i.Names),
		pq.Array(&i.PostedAts),
		pq.Array(&i.PostUrls),
		pq.Array(&i.PostIds),
		&i.SiteID,
	)
	return i, err
}

const deleteEventByID = `-- name: DeleteEventByID :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEventByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEventByID, id)
	return err
}

const deleteEventBySiteName = `-- name: DeleteEventBySiteName :exec
DELETE FROM events
USING sites
WHERE events.site_id = sites.id AND sites.name = $1
`

func (q *Queries) DeleteEventBySiteName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteEventBySiteName, name)
	return err
}

const deleteEventsBySiteID = `-- name: DeleteEventsBySiteID :exec
DELETE FROM events
WHERE site_id = $1
`

func (q *Queries) DeleteEventsBySiteID(ctx context.Context, siteID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEventsBySiteID, siteID)
	return err
}

const deleteEventsBySiteUrl = `-- name: DeleteEventsBySiteUrl :exec
DELETE FROM events
WHERE EXISTS (
    SELECT 1 FROM sites
    WHERE sites.id = events.site_id AND sites.url = $1
)
`

func (q *Queries) DeleteEventsBySiteUrl(ctx context.Context, url string) error {
	_, err := q.db.ExecContext(ctx, deleteEventsBySiteUrl, url)
	return err
}

const deleteOldEvents = `-- name: DeleteOldEvents :exec
DELETE FROM events
WHERE ends_at < NOW()
`

func (q *Queries) DeleteOldEvents(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteOldEvents)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, created_at, updated_at, tag, tag_text, starts_at, ends_at, event_cal_id, names, posted_ats, post_urls, post_ids, site_id FROM events
WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tag,
		&i.TagText,
		&i.StartsAt,
		&i.EndsAt,
		&i.EventCalID,
		pq.Array(&i.Names),
		pq.Array(&i.PostedAts),
		pq.Array(&i.PostUrls),
		pq.Array(&i.PostIds),
		&i.SiteID,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT id, created_at, updated_at, tag, tag_text, starts_at, ends_at, event_cal_id, names, posted_ats, post_urls, post_ids, site_id FROM events
ORDER BY created_at
`

func (q *Queries) GetEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalID,
			pq.Array(&i.Names),
			pq.Array(&i.PostedAts),
			pq.Array(&i.PostUrls),
			pq.Array(&i.PostIds),
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsBySiteID = `-- name: GetEventsBySiteID :many
SELECT id, created_at, updated_at, tag, tag_text, starts_at, ends_at, event_cal_id, names, posted_ats, post_urls, post_ids, site_id FROM events
WHERE site_id = $1
ORDER BY created_at
`

func (q *Queries) GetEventsBySiteID(ctx context.Context, siteID uuid.UUID) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsBySiteID, siteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalID,
			pq.Array(&i.Names),
			pq.Array(&i.PostedAts),
			pq.Array(&i.PostUrls),
			pq.Array(&i.PostIds),
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsByTag = `-- name: GetEventsByTag :many
SELECT id, created_at, updated_at, tag, tag_text, starts_at, ends_at, event_cal_id, names, posted_ats, post_urls, post_ids, site_id FROM events
WHERE tag = $1
ORDER BY created_at
`

func (q *Queries) GetEventsByTag(ctx context.Context, tag int32) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsByTag, tag)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalID,
			pq.Array(&i.Names),
			pq.Array(&i.PostedAts),
			pq.Array(&i.PostUrls),
			pq.Array(&i.PostIds),
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsByTagText = `-- name: GetEventsByTagText :many
SELECT id, created_at, updated_at, tag, tag_text, starts_at, ends_at, event_cal_id, names, posted_ats, post_urls, post_ids, site_id FROM events
WHERE tag_text = $1
ORDER BY created_at
`

func (q *Queries) GetEventsByTagText(ctx context.Context, tagText string) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsByTagText, tagText)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalID,
			pq.Array(&i.Names),
			pq.Array(&i.PostedAts),
			pq.Array(&i.PostUrls),
			pq.Array(&i.PostIds),
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsOnGoing = `-- name: GetEventsOnGoing :many
SELECT id, created_at, updated_at, tag, tag_text, starts_at, ends_at, event_cal_id, names, posted_ats, post_urls, post_ids, site_id FROM events
WHERE starts_at <= NOW() AND (ends_at IS NULL OR ends_at >= NOW())
ORDER BY created_at
`

func (q *Queries) GetEventsOnGoing(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsOnGoing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalID,
			pq.Array(&i.Names),
			pq.Array(&i.PostedAts),
			pq.Array(&i.PostUrls),
			pq.Array(&i.PostIds),
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOldEvents = `-- name: GetOldEvents :many
SELECT id, created_at, updated_at, tag, tag_text, starts_at, ends_at, event_cal_id, names, posted_ats, post_urls, post_ids, site_id FROM events
WHERE ends_at < NOW()
ORDER BY created_at
`

func (q *Queries) GetOldEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getOldEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalID,
			pq.Array(&i.Names),
			pq.Array(&i.PostedAts),
			pq.Array(&i.PostUrls),
			pq.Array(&i.PostIds),
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetEvents = `-- name: ResetEvents :exec
DELETE FROM events
`

func (q *Queries) ResetEvents(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetEvents)
	return err
}

const setEventCalID = `-- name: SetEventCalID :exec
UPDATE events
SET updated_at = NOW(), event_cal_id = $1
WHERE tag = $2 AND starts_at = $3 AND ends_at = $4
`

type SetEventCalIDParams struct {
	EventCalID sql.NullString
	Tag        int32
	StartsAt   sql.NullTime
	EndsAt     sql.NullTime
}

func (q *Queries) SetEventCalID(ctx context.Context, arg SetEventCalIDParams) error {
	_, err := q.db.ExecContext(ctx, setEventCalID,
		arg.EventCalID,
		arg.Tag,
		arg.StartsAt,
		arg.EndsAt,
	)
	return err
}

const setEventCalIDByID = `-- name: SetEventCalIDByID :exec
UPDATE events
SET updated_at = NOW(), event_cal_id = $1
WHERE id = $2
`

type SetEventCalIDByIDParams struct {
	EventCalID sql.NullString
	ID         uuid.UUID
}

func (q *Queries) SetEventCalIDByID(ctx context.Context, arg SetEventCalIDByIDParams) error {
	_, err := q.db.ExecContext(ctx, setEventCalIDByID, arg.EventCalID, arg.ID)
	return err
}
