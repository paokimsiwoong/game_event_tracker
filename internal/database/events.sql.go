// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: events.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, site_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
RETURNING id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, site_id
`

type CreateEventParams struct {
	Name     string
	Tag      int32
	TagText  string
	PostedAt sql.NullTime
	StartsAt sql.NullTime
	EndsAt   sql.NullTime
	Body     string
	SiteID   uuid.UUID
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.Name,
		arg.Tag,
		arg.TagText,
		arg.PostedAt,
		arg.StartsAt,
		arg.EndsAt,
		arg.Body,
		arg.SiteID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Tag,
		&i.TagText,
		&i.PostedAt,
		&i.StartsAt,
		&i.EndsAt,
		&i.Body,
		&i.SiteID,
	)
	return i, err
}

const createEventWithNull = `-- name: CreateEventWithNull :one
INSERT INTO events (id, created_at, updated_at, name, tag, tag_text, body, site_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, site_id
`

type CreateEventWithNullParams struct {
	Name    string
	Tag     int32
	TagText string
	Body    string
	SiteID  uuid.UUID
}

func (q *Queries) CreateEventWithNull(ctx context.Context, arg CreateEventWithNullParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEventWithNull,
		arg.Name,
		arg.Tag,
		arg.TagText,
		arg.Body,
		arg.SiteID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Tag,
		&i.TagText,
		&i.PostedAt,
		&i.StartsAt,
		&i.EndsAt,
		&i.Body,
		&i.SiteID,
	)
	return i, err
}

const deleteEventByID = `-- name: DeleteEventByID :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEventByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEventByID, id)
	return err
}

const deleteEventsBySiteID = `-- name: DeleteEventsBySiteID :exec
DELETE FROM events
WHERE site_id = $1
`

func (q *Queries) DeleteEventsBySiteID(ctx context.Context, siteID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEventsBySiteID, siteID)
	return err
}

const deleteOldEvents = `-- name: DeleteOldEvents :exec
DELETE FROM events
WHERE ends_at < NOW()
`

func (q *Queries) DeleteOldEvents(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteOldEvents)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, site_id FROM events
WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Tag,
		&i.TagText,
		&i.PostedAt,
		&i.StartsAt,
		&i.EndsAt,
		&i.Body,
		&i.SiteID,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, site_id FROM events
ORDER BY created_at
`

func (q *Queries) GetEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsAndSites = `-- name: GetEventsAndSites :many
SELECT events.id, events.created_at, events.updated_at, events.name, events.tag, events.tag_text, events.posted_at, events.starts_at, events.ends_at, events.body, events.site_id, sites.name AS site_name, sites.url AS site_url FROM events
INNER JOIN sites
ON events.site_id = sites.id
ORDER BY events.posted_at DESC, events.starts_at DESC
`

type GetEventsAndSitesRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Tag       int32
	TagText   string
	PostedAt  sql.NullTime
	StartsAt  sql.NullTime
	EndsAt    sql.NullTime
	Body      string
	SiteID    uuid.UUID
	SiteName  string
	SiteUrl   string
}

func (q *Queries) GetEventsAndSites(ctx context.Context) ([]GetEventsAndSitesRow, error) {
	rows, err := q.db.QueryContext(ctx, getEventsAndSites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsAndSitesRow
	for rows.Next() {
		var i GetEventsAndSitesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.SiteID,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsByName = `-- name: GetEventsByName :many
SELECT id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, site_id FROM events
WHERE name = $1
ORDER BY created_at
`

func (q *Queries) GetEventsByName(ctx context.Context, name string) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsByNameAndPostedAtAndSiteID = `-- name: GetEventsByNameAndPostedAtAndSiteID :many
SELECT id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, site_id FROM events
WHERE name = $1 AND posted_at = $2 AND site_id = $3
ORDER BY created_at
`

type GetEventsByNameAndPostedAtAndSiteIDParams struct {
	Name     string
	PostedAt sql.NullTime
	SiteID   uuid.UUID
}

func (q *Queries) GetEventsByNameAndPostedAtAndSiteID(ctx context.Context, arg GetEventsByNameAndPostedAtAndSiteIDParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsByNameAndPostedAtAndSiteID, arg.Name, arg.PostedAt, arg.SiteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsBySiteID = `-- name: GetEventsBySiteID :many
SELECT id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, site_id FROM events
WHERE site_id = $1
ORDER BY created_at
`

func (q *Queries) GetEventsBySiteID(ctx context.Context, siteID uuid.UUID) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsBySiteID, siteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsOnGoing = `-- name: GetEventsOnGoing :many
SELECT id, created_at, updated_at, name, tag, tag_text, posted_at, starts_at, ends_at, body, site_id FROM events
WHERE starts_at <= NOW() and ends_at >= NOW()
ORDER BY created_at
`

func (q *Queries) GetEventsOnGoing(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsOnGoing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Tag,
			&i.TagText,
			&i.PostedAt,
			&i.StartsAt,
			&i.EndsAt,
			&i.Body,
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setEventDates = `-- name: SetEventDates :exec
UPDATE events
SET updated_at = NOW(), posted_at = $1, starts_at = $2, ends_at = $3
WHERE id = $4
`

type SetEventDatesParams struct {
	PostedAt sql.NullTime
	StartsAt sql.NullTime
	EndsAt   sql.NullTime
	ID       uuid.UUID
}

func (q *Queries) SetEventDates(ctx context.Context, arg SetEventDatesParams) error {
	_, err := q.db.ExecContext(ctx, setEventDates,
		arg.PostedAt,
		arg.StartsAt,
		arg.EndsAt,
		arg.ID,
	)
	return err
}
