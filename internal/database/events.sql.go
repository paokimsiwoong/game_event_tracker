// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: events.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (id, created_at, updated_at, tag, tag_text, starts_at, ends_at, names, posted_ats, post_urls, post_ids, site_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3,
    $4,
    ARRAY[$5::TEXT],
    ARRAY[$6::TIMESTAMP WITH TIME ZONE],
    ARRAY[$7::TEXT],
    ARRAY[$8::UUID],
    $9
)
ON CONFLICT (tag, starts_at, ends_at)
DO UPDATE SET names = array_append(events.names, $5::TEXT), 
posted_ats = array_append(events.posted_ats, $6::TIMESTAMP WITH TIME ZONE),
post_urls = array_append(events.post_urls, $7::TEXT),
post_ids = array_append(events.post_ids, $8::UUID),
updated_at = NOW()
RETURNING id, created_at, updated_at, tag, tag_text, starts_at, ends_at, event_cal_ids, names, posted_ats, post_urls, post_ids, site_id
`

type CreateEventParams struct {
	Tag      int32
	TagText  string
	StartsAt pgtype.Timestamptz
	EndsAt   pgtype.Timestamptz
	Column5  string
	Column6  pgtype.Timestamptz
	Column7  string
	Column8  pgtype.UUID
	SiteID   pgtype.UUID
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Tag,
		arg.TagText,
		arg.StartsAt,
		arg.EndsAt,
		arg.Column5,
		arg.Column6,
		arg.Column7,
		arg.Column8,
		arg.SiteID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tag,
		&i.TagText,
		&i.StartsAt,
		&i.EndsAt,
		&i.EventCalIds,
		&i.Names,
		&i.PostedAts,
		&i.PostUrls,
		&i.PostIds,
		&i.SiteID,
	)
	return i, err
}

const deleteEventByID = `-- name: DeleteEventByID :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEventByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteEventByID, id)
	return err
}

const deleteEventBySiteName = `-- name: DeleteEventBySiteName :exec
DELETE FROM events
USING sites
WHERE events.site_id = sites.id AND sites.name = $1
`

func (q *Queries) DeleteEventBySiteName(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteEventBySiteName, name)
	return err
}

const deleteEventsBySiteID = `-- name: DeleteEventsBySiteID :exec
DELETE FROM events
WHERE site_id = $1
`

func (q *Queries) DeleteEventsBySiteID(ctx context.Context, siteID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteEventsBySiteID, siteID)
	return err
}

const deleteEventsBySiteUrl = `-- name: DeleteEventsBySiteUrl :exec
DELETE FROM events
WHERE EXISTS (
    SELECT 1 FROM sites
    WHERE sites.id = events.site_id AND sites.url = $1
)
`

func (q *Queries) DeleteEventsBySiteUrl(ctx context.Context, url string) error {
	_, err := q.db.Exec(ctx, deleteEventsBySiteUrl, url)
	return err
}

const deleteOldEvents = `-- name: DeleteOldEvents :exec
DELETE FROM events
WHERE ends_at < NOW()
`

func (q *Queries) DeleteOldEvents(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteOldEvents)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, created_at, updated_at, tag, tag_text, starts_at, ends_at, event_cal_ids, names, posted_ats, post_urls, post_ids, site_id FROM events
WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id pgtype.UUID) (Event, error) {
	row := q.db.QueryRow(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tag,
		&i.TagText,
		&i.StartsAt,
		&i.EndsAt,
		&i.EventCalIds,
		&i.Names,
		&i.PostedAts,
		&i.PostUrls,
		&i.PostIds,
		&i.SiteID,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT id, created_at, updated_at, tag, tag_text, starts_at, ends_at, event_cal_ids, names, posted_ats, post_urls, post_ids, site_id FROM events
ORDER BY created_at
`

func (q *Queries) GetEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalIds,
			&i.Names,
			&i.PostedAts,
			&i.PostUrls,
			&i.PostIds,
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsAndSite = `-- name: GetEventsAndSite :many
SELECT events.id, events.created_at, events.updated_at, events.tag, events.tag_text, events.starts_at, events.ends_at, events.event_cal_ids, events.names, events.posted_ats, events.post_urls, events.post_ids, events.site_id, sites.name AS site_name, sites.url AS site_url FROM events
INNER JOIN sites
ON events.site_id = sites.id
ORDER BY events.starts_at DESC, events.ends_at DESC
`

type GetEventsAndSiteRow struct {
	ID          pgtype.UUID
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Tag         int32
	TagText     string
	StartsAt    pgtype.Timestamptz
	EndsAt      pgtype.Timestamptz
	EventCalIds []string
	Names       []string
	PostedAts   []pgtype.Timestamptz
	PostUrls    []string
	PostIds     []pgtype.UUID
	SiteID      pgtype.UUID
	SiteName    string
	SiteUrl     string
}

func (q *Queries) GetEventsAndSite(ctx context.Context) ([]GetEventsAndSiteRow, error) {
	rows, err := q.db.Query(ctx, getEventsAndSite)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsAndSiteRow
	for rows.Next() {
		var i GetEventsAndSiteRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalIds,
			&i.Names,
			&i.PostedAts,
			&i.PostUrls,
			&i.PostIds,
			&i.SiteID,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsBySiteID = `-- name: GetEventsBySiteID :many
SELECT id, created_at, updated_at, tag, tag_text, starts_at, ends_at, event_cal_ids, names, posted_ats, post_urls, post_ids, site_id FROM events
WHERE site_id = $1
ORDER BY created_at
`

func (q *Queries) GetEventsBySiteID(ctx context.Context, siteID pgtype.UUID) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEventsBySiteID, siteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalIds,
			&i.Names,
			&i.PostedAts,
			&i.PostUrls,
			&i.PostIds,
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsByTag = `-- name: GetEventsByTag :many
SELECT id, created_at, updated_at, tag, tag_text, starts_at, ends_at, event_cal_ids, names, posted_ats, post_urls, post_ids, site_id FROM events
WHERE tag = $1
ORDER BY created_at
`

func (q *Queries) GetEventsByTag(ctx context.Context, tag int32) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEventsByTag, tag)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalIds,
			&i.Names,
			&i.PostedAts,
			&i.PostUrls,
			&i.PostIds,
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsByTagText = `-- name: GetEventsByTagText :many
SELECT id, created_at, updated_at, tag, tag_text, starts_at, ends_at, event_cal_ids, names, posted_ats, post_urls, post_ids, site_id FROM events
WHERE tag_text = $1
ORDER BY created_at
`

func (q *Queries) GetEventsByTagText(ctx context.Context, tagText string) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEventsByTagText, tagText)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalIds,
			&i.Names,
			&i.PostedAts,
			&i.PostUrls,
			&i.PostIds,
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsOnGoing = `-- name: GetEventsOnGoing :many
SELECT events.id, events.created_at, events.updated_at, events.tag, events.tag_text, events.starts_at, events.ends_at, events.event_cal_ids, events.names, events.posted_ats, events.post_urls, events.post_ids, events.site_id, sites.name AS site_name, sites.url AS site_url FROM events
INNER JOIN sites
ON events.site_id = sites.id
WHERE events.starts_at <= NOW() AND (events.ends_at IS NULL OR events.ends_at >= NOW())
ORDER BY events.starts_at DESC, events.ends_at DESC
`

type GetEventsOnGoingRow struct {
	ID          pgtype.UUID
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Tag         int32
	TagText     string
	StartsAt    pgtype.Timestamptz
	EndsAt      pgtype.Timestamptz
	EventCalIds []string
	Names       []string
	PostedAts   []pgtype.Timestamptz
	PostUrls    []string
	PostIds     []pgtype.UUID
	SiteID      pgtype.UUID
	SiteName    string
	SiteUrl     string
}

func (q *Queries) GetEventsOnGoing(ctx context.Context) ([]GetEventsOnGoingRow, error) {
	rows, err := q.db.Query(ctx, getEventsOnGoing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsOnGoingRow
	for rows.Next() {
		var i GetEventsOnGoingRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalIds,
			&i.Names,
			&i.PostedAts,
			&i.PostUrls,
			&i.PostIds,
			&i.SiteID,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsOnGoingAndUpcoming = `-- name: GetEventsOnGoingAndUpcoming :many
SELECT events.id, events.created_at, events.updated_at, events.tag, events.tag_text, events.starts_at, events.ends_at, events.event_cal_ids, events.names, events.posted_ats, events.post_urls, events.post_ids, events.site_id, sites.name AS site_name, sites.url AS site_url FROM events
INNER JOIN sites
ON events.site_id = sites.id
WHERE (events.ends_at IS NULL OR events.ends_at >= NOW())
ORDER BY events.starts_at DESC, events.ends_at DESC
`

type GetEventsOnGoingAndUpcomingRow struct {
	ID          pgtype.UUID
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Tag         int32
	TagText     string
	StartsAt    pgtype.Timestamptz
	EndsAt      pgtype.Timestamptz
	EventCalIds []string
	Names       []string
	PostedAts   []pgtype.Timestamptz
	PostUrls    []string
	PostIds     []pgtype.UUID
	SiteID      pgtype.UUID
	SiteName    string
	SiteUrl     string
}

func (q *Queries) GetEventsOnGoingAndUpcoming(ctx context.Context) ([]GetEventsOnGoingAndUpcomingRow, error) {
	rows, err := q.db.Query(ctx, getEventsOnGoingAndUpcoming)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsOnGoingAndUpcomingRow
	for rows.Next() {
		var i GetEventsOnGoingAndUpcomingRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalIds,
			&i.Names,
			&i.PostedAts,
			&i.PostUrls,
			&i.PostIds,
			&i.SiteID,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsWithinGivenPeriod = `-- name: GetEventsWithinGivenPeriod :many
SELECT events.id, events.created_at, events.updated_at, events.tag, events.tag_text, events.starts_at, events.ends_at, events.event_cal_ids, events.names, events.posted_ats, events.post_urls, events.post_ids, events.site_id, sites.name AS site_name, sites.url AS site_url FROM events
INNER JOIN sites
ON events.site_id = sites.id
WHERE events.ends_at IS NULL OR events.ends_at >= $1
ORDER BY events.starts_at DESC, events.ends_at DESC
`

type GetEventsWithinGivenPeriodRow struct {
	ID          pgtype.UUID
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Tag         int32
	TagText     string
	StartsAt    pgtype.Timestamptz
	EndsAt      pgtype.Timestamptz
	EventCalIds []string
	Names       []string
	PostedAts   []pgtype.Timestamptz
	PostUrls    []string
	PostIds     []pgtype.UUID
	SiteID      pgtype.UUID
	SiteName    string
	SiteUrl     string
}

func (q *Queries) GetEventsWithinGivenPeriod(ctx context.Context, endsAt pgtype.Timestamptz) ([]GetEventsWithinGivenPeriodRow, error) {
	rows, err := q.db.Query(ctx, getEventsWithinGivenPeriod, endsAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsWithinGivenPeriodRow
	for rows.Next() {
		var i GetEventsWithinGivenPeriodRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalIds,
			&i.Names,
			&i.PostedAts,
			&i.PostUrls,
			&i.PostIds,
			&i.SiteID,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOldEvents = `-- name: GetOldEvents :many
SELECT events.id, events.created_at, events.updated_at, events.tag, events.tag_text, events.starts_at, events.ends_at, events.event_cal_ids, events.names, events.posted_ats, events.post_urls, events.post_ids, events.site_id, sites.name AS site_name, sites.url AS site_url FROM events
INNER JOIN sites
ON events.site_id = sites.id
WHERE events.ends_at < NOW()
ORDER BY events.starts_at DESC, events.ends_at DESC
`

type GetOldEventsRow struct {
	ID          pgtype.UUID
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Tag         int32
	TagText     string
	StartsAt    pgtype.Timestamptz
	EndsAt      pgtype.Timestamptz
	EventCalIds []string
	Names       []string
	PostedAts   []pgtype.Timestamptz
	PostUrls    []string
	PostIds     []pgtype.UUID
	SiteID      pgtype.UUID
	SiteName    string
	SiteUrl     string
}

func (q *Queries) GetOldEvents(ctx context.Context) ([]GetOldEventsRow, error) {
	rows, err := q.db.Query(ctx, getOldEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOldEventsRow
	for rows.Next() {
		var i GetOldEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalIds,
			&i.Names,
			&i.PostedAts,
			&i.PostUrls,
			&i.PostIds,
			&i.SiteID,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetEvents = `-- name: ResetEvents :exec
DELETE FROM events
`

func (q *Queries) ResetEvents(ctx context.Context) error {
	_, err := q.db.Exec(ctx, resetEvents)
	return err
}

const setEventCalID = `-- name: SetEventCalID :exec
UPDATE events
SET updated_at = NOW(), event_cal_ids = array_append(event_cal_ids, $1::TEXT)
WHERE tag = $2 AND starts_at = $3 AND ends_at = $4
`

type SetEventCalIDParams struct {
	Column1  string
	Tag      int32
	StartsAt pgtype.Timestamptz
	EndsAt   pgtype.Timestamptz
}

func (q *Queries) SetEventCalID(ctx context.Context, arg SetEventCalIDParams) error {
	_, err := q.db.Exec(ctx, setEventCalID,
		arg.Column1,
		arg.Tag,
		arg.StartsAt,
		arg.EndsAt,
	)
	return err
}

const setEventCalIDByID = `-- name: SetEventCalIDByID :exec
UPDATE events
SET updated_at = NOW(), event_cal_ids = array_append(event_cal_ids, $1::TEXT)
WHERE id = $2
`

type SetEventCalIDByIDParams struct {
	Column1 string
	ID      pgtype.UUID
}

func (q *Queries) SetEventCalIDByID(ctx context.Context, arg SetEventCalIDByIDParams) error {
	_, err := q.db.Exec(ctx, setEventCalIDByID, arg.Column1, arg.ID)
	return err
}

const setEventCalIDsByID = `-- name: SetEventCalIDsByID :exec
UPDATE events
SET updated_at = NOW(), event_cal_ids = array_cat(event_cal_ids, $1::TEXT[])
WHERE id = $2
`

type SetEventCalIDsByIDParams struct {
	Column1 []string
	ID      pgtype.UUID
}

func (q *Queries) SetEventCalIDsByID(ctx context.Context, arg SetEventCalIDsByIDParams) error {
	_, err := q.db.Exec(ctx, setEventCalIDsByID, arg.Column1, arg.ID)
	return err
}
