// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: events.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type GetEvent struct {
	ID          pgtype.UUID
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Tag         int32
	TagText     string
	StartsAt    pgtype.Timestamptz
	EndsAt      pgtype.Timestamptz
	EventCalIds []string
	Names       []string
	PostedAts   []pgtype.Timestamptz
	PostUrls    []string
	PostIds     []pgtype.UUID
	SiteID      pgtype.UUID
	SiteName    string
	SiteUrl     string
}

func (q *Queries) GetEventsAndSiteManual(ctx context.Context) ([]GetEvent, error) {
	rows, err := q.db.Query(ctx, getEventsAndSite)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEvent
	for rows.Next() {
		var i GetEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalIds,
			&i.Names,
			&i.PostedAts,
			&i.PostUrls,
			&i.PostIds,
			&i.SiteID,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

func (q *Queries) GetEventsOnGoingManual(ctx context.Context) ([]GetEvent, error) {
	rows, err := q.db.Query(ctx, getEventsOnGoing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEvent
	for rows.Next() {
		var i GetEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalIds,
			&i.Names,
			&i.PostedAts,
			&i.PostUrls,
			&i.PostIds,
			&i.SiteID,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

func (q *Queries) GetEventsOnGoingAndUpcomingManual(ctx context.Context) ([]GetEvent, error) {
	rows, err := q.db.Query(ctx, getEventsOnGoingAndUpcoming)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEvent
	for rows.Next() {
		var i GetEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalIds,
			&i.Names,
			&i.PostedAts,
			&i.PostUrls,
			&i.PostIds,
			&i.SiteID,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

func (q *Queries) GetEventsWithinGivenPeriodManual(ctx context.Context, endsAt pgtype.Timestamptz) ([]GetEvent, error) {
	rows, err := q.db.Query(ctx, getEventsWithinGivenPeriod, endsAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEvent
	for rows.Next() {
		var i GetEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalIds,
			&i.Names,
			&i.PostedAts,
			&i.PostUrls,
			&i.PostIds,
			&i.SiteID,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

func (q *Queries) GetOldEventsManual(ctx context.Context) ([]GetEvent, error) {
	rows, err := q.db.Query(ctx, getOldEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEvent
	for rows.Next() {
		var i GetEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Tag,
			&i.TagText,
			&i.StartsAt,
			&i.EndsAt,
			&i.EventCalIds,
			&i.Names,
			&i.PostedAts,
			&i.PostUrls,
			&i.PostIds,
			&i.SiteID,
			&i.SiteName,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
