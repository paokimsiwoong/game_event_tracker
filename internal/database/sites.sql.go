// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sites.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSite = `-- name: CreateSite :one
INSERT INTO sites (id, created_at, updated_at, name, url)
VALUES (
    gen_random_uuid(), 
    NOW(),
    NOW(),
    $1,
    $2
)   
RETURNING id, created_at, updated_at, last_fetched_at, name, url
`

type CreateSiteParams struct {
	Name string
	Url  string
}

// returning 으로 생성한 유저를 바로 반환하고 있음 (위에 :one으로 생성한 유저 하나만 반환하도록 함)
func (q *Queries) CreateSite(ctx context.Context, arg CreateSiteParams) (Site, error) {
	row := q.db.QueryRow(ctx, createSite, arg.Name, arg.Url)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
		&i.Name,
		&i.Url,
	)
	return i, err
}

const deleteSiteByName = `-- name: DeleteSiteByName :exec
DELETE FROM sites
WHERE name = $1
`

func (q *Queries) DeleteSiteByName(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteSiteByName, name)
	return err
}

const deleteSiteByURL = `-- name: DeleteSiteByURL :exec
DELETE FROM sites
WHERE url = $1
`

func (q *Queries) DeleteSiteByURL(ctx context.Context, url string) error {
	_, err := q.db.Exec(ctx, deleteSiteByURL, url)
	return err
}

const getSiteByName = `-- name: GetSiteByName :one
SELECT id, created_at, updated_at, last_fetched_at, name, url FROM sites 
WHERE name = $1
`

func (q *Queries) GetSiteByName(ctx context.Context, name string) (Site, error) {
	row := q.db.QueryRow(ctx, getSiteByName, name)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
		&i.Name,
		&i.Url,
	)
	return i, err
}

const getSiteByURL = `-- name: GetSiteByURL :one
SELECT id, created_at, updated_at, last_fetched_at, name, url FROM sites
WHERE url = $1
`

func (q *Queries) GetSiteByURL(ctx context.Context, url string) (Site, error) {
	row := q.db.QueryRow(ctx, getSiteByURL, url)
	var i Site
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
		&i.Name,
		&i.Url,
	)
	return i, err
}

const getSites = `-- name: GetSites :many
SELECT sites.id, sites.name, sites.created_at, sites.updated_at, sites.last_fetched_at, sites.url
FROM sites
ORDER BY sites.updated_at
`

type GetSitesRow struct {
	ID            pgtype.UUID
	Name          string
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
	LastFetchedAt pgtype.Timestamp
	Url           string
}

func (q *Queries) GetSites(ctx context.Context) ([]GetSitesRow, error) {
	rows, err := q.db.Query(ctx, getSites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSitesRow
	for rows.Next() {
		var i GetSitesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastFetchedAt,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markSiteFetched = `-- name: MarkSiteFetched :exec
UPDATE sites
SET updated_at = NOW(), last_fetched_at = NOW()
WHERE id = $1
`

func (q *Queries) MarkSiteFetched(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, markSiteFetched, id)
	return err
}

const resetSites = `-- name: ResetSites :exec
DELETE FROM sites
`

func (q *Queries) ResetSites(ctx context.Context) error {
	_, err := q.db.Exec(ctx, resetSites)
	return err
}
